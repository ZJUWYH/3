import os
import warnings
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import torch
from torch.utils.data import Dataset
# from tqdm.notebook import tqdm
from collections import Counter
import torch.nn as nn
import gc
import time
import torch
import numpy as np
from torch.utils.data import DataLoader
from transformers import get_linear_schedule_with_warmup
import random
from torch.nn.utils.rnn import pad_sequence, pack_padded_sequence, pack_sequence, pad_packed_sequence
# from DNN_model import GRUAutoEncoder, CustomModel, LSTMAutoEncoder
import json
import copy
from tqdm import tqdm
import scipy


class CFG:
    tau = 4
    dim = 3
    beta = 1
    hat_rho_control = 100
    # mu_0_list = np.array([[[[0.79004514],
    #                         [-0.32430013],
    #                         [5.72644421]],
    #
    #                        [[0.81900607],
    #                         [-0.34589212],
    #                         [5.29114656]],
    #
    #                        [[0.58311008],
    #                         [-0.34870143],
    #                         [7.01006754]],
    #
    #                        [[-0.46554053],
    #                         [0.33187978],
    #                         [-7.64387867]],
    #
    #                        [[0.49711792],
    #                         [-0.47131314],
    #                         [7.64151506]],
    #
    #                        [[-0.29439315],
    #                         [-0.14150935],
    #                         [-7.15143977]],
    #
    #                        [[-0.29439315],
    #                         [-0.14150935],
    #                         [-7.15143977]],
    #
    #                        [[-0.29439315],
    #                         [-0.14150935],
    #                         [-7.15143977]],
    #
    #                        [[0.39474955],
    #                         [-0.3219714],
    #                         [4.91296474]]],
    #
    #                       [[[0.72542197],
    #                         [-1.06944862],
    #                         [4.44719886]],
    #
    #                        [[0.61543104],
    #                         [-0.23494356],
    #                         [3.16621342]],
    #
    #                        [[0.43267269],
    #                         [-1.65348451],
    #                         [6.68521959]],
    #
    #                        [[-0.122975],
    #                         [-1.04398583],
    #                         [7.50959329]],
    #
    #                        [[0.35036767],
    #                         [-1.6943551],
    #                         [7.1669306]],
    #
    #                        [[-0.19744301],
    #                         [-1.07344488],
    #                         [7.82463631]],
    #
    #                        [[-0.19744301],
    #                         [-1.07344488],
    #                         [7.82463631]],
    #
    #                        [[-0.19744301],
    #                         [-1.07344488],
    #                         [7.82463631]],
    #
    #                        [[0.20954156],
    #                         [-1.0135443],
    #                         [4.69766062]]]])
    #
    # Sigma_0_list = np.array([[[[1.41365328e-01, -5.23539083e-02, -3.39215740e-01],
    #                            [-5.23539083e-02, 1.00285917e-01, 1.55124274e-01],
    #                            [-3.39215740e-01, 1.55124274e-01, 3.92653289e+00]],
    #
    #                           [[1.15044283e-01, 2.54634635e-02, -5.44296038e-01],
    #                            [2.54634635e-02, 1.49878621e-01, -3.66965877e-01],
    #                            [-5.44296038e-01, -3.66965877e-01, 5.48409025e+00]],
    #
    #                           [[1.17678927e-01, -5.71595208e-02, -3.85468971e-01],
    #                            [-5.71595208e-02, 1.58015133e-01, -2.66912002e-01],
    #                            [-3.85468971e-01, -2.66912002e-01, 7.45976807e+00]],
    #
    #                           [[6.33294457e-02, -3.99295898e-02, -2.28758666e-01],
    #                            [-3.99295898e-02, 2.31360652e-01, -3.24205777e-01],
    #                            [-2.28758666e-01, -3.24205777e-01, 8.18418826e+00]],
    #
    #                           [[1.08305175e-01, -4.21274936e-02, -3.54145285e-01],
    #                            [-4.21274936e-02, 1.66319744e-01, -5.94692992e-01],
    #                            [-3.54145285e-01, -5.94692992e-01, 9.70217480e+00]],
    #
    #                           [[6.36358473e-02, -5.38493020e-02, -2.91377762e-01],
    #                            [-5.38493020e-02, 1.62434353e-01, 5.48052041e-01],
    #                            [-2.91377762e-01, 5.48052041e-01, 5.36856828e+00]],
    #
    #                           [[6.36358473e-02, -5.38493020e-02, -2.91377762e-01],
    #                            [-5.38493020e-02, 1.62434353e-01, 5.48052041e-01],
    #                            [-2.91377762e-01, 5.48052041e-01, 5.36856828e+00]],
    #
    #                           [[6.36358473e-02, -5.38493020e-02, -2.91377762e-01],
    #                            [-5.38493020e-02, 1.62434353e-01, 5.48052041e-01],
    #                            [-2.91377762e-01, 5.48052041e-01, 5.36856828e+00]],
    #
    #                           [[2.14323854e-02, 2.37999621e-03, -1.05113499e-01],
    #                            [2.37999621e-03, 3.47557338e-02, -2.15414021e-01],
    #                            [-1.05113499e-01, -2.15414021e-01, 3.62639118e+00]]],
    #
    #                          [[[4.83069954e-02, -3.64136919e-02, -1.52515302e-01],
    #                            [-3.64136919e-02, 2.54303220e-01, -6.74608780e-01],
    #                            [-1.52515302e-01, -6.74608780e-01, 5.58147309e+00]],
    #
    #                           [[6.48933029e-02, -4.29707827e-02, -1.48465506e-01],
    #                            [-4.29707827e-02, 2.52349299e-01, 3.46931806e-01],
    #                            [-1.48465506e-01, 3.46931806e-01, 1.05983961e+00]],
    #
    #                           [[5.60918492e-02, -7.98442002e-02, -2.18199135e-01],
    #                            [-7.98442002e-02, 7.35759958e-01, -2.51619007e+00],
    #                            [-2.18199135e-01, -2.51619007e+00, 1.57532641e+01]],
    #
    #                           [[1.17179783e-01, -1.17020037e-01, -4.46026159e-01],
    #                            [-1.17020037e-01, 5.73527089e-01, -1.18832220e+00],
    #                            [-4.46026159e-01, -1.18832220e+00, 1.84542195e+01]],
    #
    #                           [[5.56129005e-02, -9.21206052e-02, -4.32746594e-02],
    #                            [-9.21206052e-02, 1.06847119e+00, -3.25656966e+00],
    #                            [-4.32746594e-02, -3.25656966e+00, 1.86047243e+01]],
    #
    #                           [[1.07766149e-01, -1.11610188e-01, -5.00882923e-01],
    #                            [-1.11610188e-01, 4.96813538e-01, -1.10751459e+00],
    #                            [-5.00882923e-01, -1.10751459e+00, 1.99204937e+01]],
    #
    #                           [[1.07766149e-01, -1.11610188e-01, -5.00882923e-01],
    #                            [-1.11610188e-01, 4.96813538e-01, -1.10751459e+00],
    #                            [-5.00882923e-01, -1.10751459e+00, 1.99204937e+01]],
    #
    #                           [[1.07766149e-01, -1.11610188e-01, -5.00882923e-01],
    #                            [-1.11610188e-01, 4.96813538e-01, -1.10751459e+00],
    #                            [-5.00882923e-01, -1.10751459e+00, 1.99204937e+01]],
    #
    #                           [[1.06884624e-02, -4.06191974e-03, -6.76599730e-02],
    #                            [-4.06191974e-03, 1.94940752e-01, -8.80579134e-01],
    #                            [-6.76599730e-02, -8.80579134e-01, 6.45256868e+00]]]])
    # mu_0_list = np.array([[[[0.78071643],
    #                         [-0.17776129],
    #                         [5.3222943]],
    #
    #                        [[0.80783969],
    #                         [-0.1687319],
    #                         [4.79740217]],
    #
    #                        [[0.57595759],
    #                         [-0.23537388],
    #                         [6.6959346]],
    #
    #                        [[-0.45606489],
    #                         [0.18136395],
    #                         [-7.22665633]],
    #
    #                        [[0.49278099],
    #                         [-0.40220165],
    #                         [7.44826152]],
    #
    #                        [[-0.2857215],
    #                         [-0.27478285],
    #                         [-6.78875282]],
    #
    #                        [[-0.55155526],
    #                         [-0.10485069],
    #                         [-5.80749883]],
    #
    #                        [[-0.59635452],
    #                         [-0.0960095],
    #                         [-5.58101793]],
    #
    #                        [[0.41470288],
    #                         [-0.32988661],
    #                         [4.81774509]]],
    #
    #                       [[[0.71960674],
    #                         [-0.9561648],
    #                         [4.25449284]],
    #
    #                        [[0.66187765],
    #                         [-0.75519074],
    #                         [4.32928951]],
    #
    #                        [[0.43071655],
    #                         [-1.55413773],
    #                         [6.53394092]],
    #
    #                        [[-0.13057305],
    #                         [-1.01424109],
    #                         [7.17544506]],
    #
    #                        [[0.35213486],
    #                         [-1.64593882],
    #                         [7.12702585]],
    #
    #                        [[-0.19967444],
    #                         [-1.05191852],
    #                         [7.49019203]],
    #
    #                        [[0.65343824],
    #                         [-0.78768995],
    #                         [4.17442004]],
    #
    #                        [[0.65277846],
    #                         [-0.86139943],
    #                         [4.47501184]],
    #
    #                        [[0.34053164],
    #                         [-0.94622792],
    #                         [4.16452229]]]])
    # Sigma_0_list = np.array([[[[1.22711280e-01, -3.98328745e-02, -3.12430068e-01],
    #                            [-3.98328745e-02, 9.15519490e-02, 2.32325182e-01],
    #                            [-3.12430068e-01, 2.32325182e-01, 2.69189538e+00]],
    #
    #                           [[1.01678202e-01, 1.52660173e-02, -4.64431514e-01],
    #                            [1.52660173e-02, 1.05927675e-01, -8.79784041e-02],
    #                            [-4.64431514e-01, -8.79784041e-02, 3.54604463e+00]],
    #
    #                           [[1.03025790e-01, -4.77747760e-02, -3.52338978e-01],
    #                            [-4.77747760e-02, 8.46104978e-02, 5.41760590e-02],
    #                            [-3.52338978e-01, 5.41760590e-02, 5.27567292e+00]],
    #
    #                           [[5.49397653e-02, -2.97753850e-02, -2.21928876e-01],
    #                            [-2.97753850e-02, 1.26441438e-01, 9.63591732e-02],
    #                            [-2.21928876e-01, 9.63591732e-02, 5.48417764e+00]],
    #
    #                           [[9.47584399e-02, -3.45678992e-02, -3.21602672e-01],
    #                            [-3.45678992e-02, 9.00107766e-02, -2.61008481e-01],
    #                            [-3.21602672e-01, -2.61008481e-01, 7.40781281e+00]],
    #
    #                           [[5.53120694e-02, -4.52006635e-02, -2.64115239e-01],
    #                            [-4.52006635e-02, 1.47641163e-01, 5.83202242e-01],
    #                            [-2.64115239e-01, 5.83202242e-01, 3.87975400e+00]],
    #
    #                           [[9.04080813e-02, -5.97202190e-02, -3.39070336e-01],
    #                            [-5.97202190e-02, 1.62519834e-01, 3.83460009e-01],
    #                            [-3.39070336e-01, 3.83460009e-01, 2.90354419e+00]],
    #
    #                           [[6.90415009e-02, -1.36605171e-02, -3.14301070e-01],
    #                            [-1.36605171e-02, 9.89293355e-02, 1.92919625e-01],
    #                            [-3.14301070e-01, 1.92919625e-01, 2.99511989e+00]],
    #
    #                           [[1.82028042e-02, -4.66746861e-03, -7.42724410e-02],
    #                            [-4.66746861e-03, 4.90146786e-02, -2.05761326e-01],
    #                            [-7.42724410e-02, -2.05761326e-01, 3.00615528e+00]]],
    #
    #                          [[[4.22394852e-02, -2.52648220e-02, -1.50394120e-01],
    #                            [-2.52648220e-02, 1.38441000e-01, -2.01023884e-01],
    #                            [-1.50394120e-01, -2.01023884e-01, 3.59685239e+00]],
    #
    #                           [[4.96569275e-02, 1.60057174e-02, -1.87780764e-01],
    #                            [1.60057174e-02, 3.93786433e-02, -8.27272362e-02],
    #                            [-1.87780764e-01, -8.27272362e-02, 3.81412016e+00]],
    #
    #                           [[4.82111017e-02, -5.60339590e-02, -2.13186195e-01],
    #                            [-5.60339590e-02, 5.46856646e-01, -1.68945928e+00],
    #                            [-2.13186195e-01, -1.68945928e+00, 1.18752825e+01]],
    #
    #                           [[1.00419473e-01, -1.04501637e-01, -2.81842575e-01],
    #                            [-1.04501637e-01, 4.92609760e-01, -1.34326813e+00],
    #                            [-2.81842575e-01, -1.34326813e+00, 1.96681204e+01]],
    #
    #                           [[4.79027369e-02, -6.79029072e-02, -5.69180446e-02],
    #                            [-6.79029072e-02, 8.40660990e-01, -2.46801682e+00],
    #                            [-5.69180446e-02, -2.46801682e+00, 1.49206041e+01]],
    #
    #                           [[9.06760791e-02, -9.38018322e-02, -3.97308122e-01],
    #                            [-9.38018322e-02, 4.12345327e-01, -1.12871391e+00],
    #                            [-3.97308122e-01, -1.12871391e+00, 2.07013659e+01]],
    #
    #                           [[6.84742609e-02, -3.83642376e-02, 8.69666899e-02],
    #                            [-3.83642376e-02, 2.35545515e-01, -5.52911494e-01],
    #                            [8.69666899e-02, -5.52911494e-01, 7.44051377e+00]],
    #
    #                           [[1.03616720e-01, -1.62598149e-02, -4.89428715e-02],
    #                            [-1.62598149e-02, 3.45002624e-01, -1.24626677e+00],
    #                            [-4.89428715e-02, -1.24626677e+00, 1.02612705e+01]],
    #
    #                           [[7.87978969e-03, 8.49079311e-05, -6.50497405e-02],
    #                            [8.49079311e-05, 1.44391358e-01, -6.61823747e-01],
    #                            [-6.50497405e-02, -6.61823747e-01, 4.90642735e+00]]]])
    mu_0_list = np.zeros((2,9,3,1))
    Sigma_0_list = np.zeros((2,9,3,3))


def generate_Phi_and_timeaxes(time):
    timeaxes = np.array([(idx + 1) / 500 for idx in range(time)])
    Phi = np.zeros((time, 3), dtype=np.float64)
    for idx in range(1, time + 1):
        Phi[idx - 1] = np.array([1, idx / 500, (idx / 500) ** 2])
    return Phi, timeaxes


def save_tuple(data, path):
    with open(path, 'w') as f_json:
        json.dump(data, f_json)


def read_tuple(path):
    with open(path, 'r') as f_json:
        data = json.load(f_json)
    return data


def set_seed(seed):
    try:
        import torch
        torch.manual_seed(seed)
        if torch.cuda.is_available():
            torch.cuda.manual_seed_all(seed)
            torch.backends.cudnn.deterministic = True
            torch.backends.cudnn.benchmark = False
    except Exception as e:
        print("Set seed failed,details are ", e)
        pass
    import numpy as np
    np.random.seed(seed)
    import random as python_random
    python_random.seed(seed)


def generate_rand_psd(matrixSize):
    A = np.random.rand(matrixSize, matrixSize)
    B = np.dot(A, A.transpose())
    return B


class Preprocessing:
    def drop_sensors(df, sensor_index):
        df0 = df.copy()
        df0.drop(df0.columns[sensor_index], axis=1, inplace=True)
        return df0

    def drop_units(df, unit_index):
        df0 = df.copy()
        df0.drop(df0[df0[df0.columns[0]].isin(unit_index)].index, axis=0, inplace=True)
        return df0.reset_index(drop=True)

    def add_timeseries(df):
        df0 = df.copy()
        df0["Time"] = df0.groupby(["Unit"]).cumcount() + 1
        return df0


def rmse(predictions, targets):
    return np.sqrt(np.mean((predictions - targets) ** 2))


class AircraftDataset(Dataset):
    def __init__(self, df, labels):  # df is a dataframe and label is an array indicate the true failure mode
        self.df = df.groupby("Unit").agg(list).reset_index()
        self.labels = labels

    def __len__(self):
        return self.df.shape[0]

    def __getitem__(self, idx):
        data = {}
        #         sensor = ['T24', 'T30', 'T50', 'P30', 'Nf', 'Nc', 'Ps30',
        #                   'phi', 'NRf', 'NRc', 'BPR', 'htBleed', 'W31', 'W32']
        sensor = ['T24', 'T30', 'T50', 'P30', 'Ps30', 'phi', 'W31', 'W32']
        # dai_hao = ["s1", "s2", "s3", "s4", "s5", "s6"]
        multi_sensor = []
        for sensor_name in sensor:
            multi_sensor.append(np.array(self.df[sensor_name].values.tolist()[idx]))
            single_sensor = np.array(self.df[sensor_name].values.tolist()[idx], dtype=np.float64)[:, None]
            data[sensor_name] = single_sensor
        multi_sensor = np.vstack(multi_sensor).transpose(1, 0)
        data["input"] = np.array(multi_sensor, dtype=np.float64)
        data["lifetime"] = np.array(len(multi_sensor), dtype=np.int64)
        g = self.df["Time"].values.tolist()[idx]
        data["Phi_l"] = np.array([np.array([1, i / 500, (i / 500) * (i / 500)]) for i in g], dtype=np.float64)
        # data["Phi_l"] = np.array([np.array([1, i, i * i], dtype=np.int64) for i in g], dtype=np.int64)
        if self.labels[idx].item() == -1:
            data["mode"] = np.array([1, 0], dtype=np.float64)
        elif self.labels[idx].item() == 1:
            data["mode"] = np.array([0, 1], dtype=np.float64)
        return data


class AircraftDataset_one_mode(AircraftDataset):
    def __init__(self, df, labels, mode):  # df is a dataframe and label is an array indicate the true failure mode
        super().__init__(df, labels)
        self.mode = mode
        self.mode_index = np.where(self.labels.reshape(-1) == self.mode)[0].tolist()

    def __len__(self):
        return len(self.mode_index)

    def __getitem__(self, idx):
        mode_index = self.mode_index[idx]
        return super().__getitem__(mode_index)
